import { spawn } from 'child_process';
import * as vscode from 'vscode';

// Fetch AI response based on the prompt, selected model, and file path
export function fetchAIResponse(prompt: string, filePath: string | null, model: string, callback: (chunk: string, isFinal: boolean) => void) {
    const selectedModel = model || "llama3.1";
    const process = spawn("ollama", ["run", selectedModel, prompt], { stdio: ['ignore', 'pipe', 'pipe'] });

    let fullResponse = "";

    process.stdout.on("data", (data) => {
        const chunk = data.toString();
        fullResponse += chunk;
        callback(chunk, false);
    });

    process.on("close", (code) => {
        console.log(`✅ Ollama Process Exited with Code: ${code}`);

        const extractedCode = extractCode(fullResponse);

        if (filePath && extractedCode) {
            vscode.workspace.fs.writeFile(vscode.Uri.file(filePath), Buffer.from(extractedCode, 'utf-8'))
                .then(() => callback(`✅ Code written to ${filePath}!\n\n`, true),
                      (error) => callback(`❌ Error writing file: ${error.message}\n\n`, true));
        } else {
            callback("\n\n" + formatText(fullResponse) + `\n\nMessage generated by ${selectedModel}.`, true);
        }
    });
}

export function analyzeCode(filePath: string, model: string, callback: (chunk: string, isFinal: boolean) => void) {
    vscode.workspace.fs.readFile(vscode.Uri.file(filePath)).then((fileContent) => {
        const code = new TextDecoder().decode(fileContent);
        const analysisPrompt = `Analyze the following code and provide suggestions for improvements, optimizations, and best practices:\n\n${code}`;

        const selectedModel = model || "llama3";
        const process = spawn("ollama", ["run", selectedModel, analysisPrompt], { stdio: ['ignore', 'pipe', 'pipe'] });

        let fullResponse = "";

        process.stdout.on("data", (data) => {
            const chunk = data.toString();
            fullResponse += chunk;
            callback(chunk, false);
        });

        process.on("close", (code) => {
            console.log(`✅ Analysis Completed with Code: ${code}`);
            callback("\n\n" + formatText(fullResponse) + `\n\nMessage generated by ${selectedModel}.`, true);
        });

    }, (error) => {
        callback(`❌ Error reading file: ${error.message}\n\n`, true);
    });
}


// Extract code blocks from the AI response (if any)
function extractCode(text: string): string {
    const codeRegex = /```(?:\w+\n)?([\s\S]*?)```/g;
    let match;
    let codeBlocks = [];

    while ((match = codeRegex.exec(text)) !== null) {
        codeBlocks.push(match[1].trim());
    }

    // Return the extracted code or the original text if no code was found
    return codeBlocks.length > 0 ? codeBlocks.join("\n\n") : text;
}

// Format the text (e.g., converting newlines to <br> and code blocks to HTML tags)
function formatText(text: string): string {
    return text.replace(/\n/g, "<br>").replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>');
}
